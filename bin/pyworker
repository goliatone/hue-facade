#!/usr/bin/env python
# -*- coding: utf-8 -*-
import sys
import argparse
import traceback
import os
import signal
import requests
import json
import time
import math


controller = None

class BridgeController:
    def __init__(self, bridges):
        self.bridges = bridges


    def quit_gracefully(self):
        for i in self.bridges:
            payload = {"on":False, "transitiontime": 40}
            r = requests.put(i, data=json.dumps(payload))
        exit(0)

    def transition(self, hbs, t):
        for i in self.bridges:
            payload = HSBtoHue(hbs, t)
            print payload
            r = requests.put(i, data=json.dumps(payload))


def loop(controller):
    while True:
        controller.transition([0, 0.58, 0.84], 50)
        time.sleep(5)
        controller.transition([0,.58, .1], 40)
        time.sleep(4)


def HSBtoHue(hsbval, t):
    h = math.floor(hsbval[0] * 65535)
    s = math.floor(hsbval[1] * 255)
    b = math.floor(hsbval[2] * 255)
    hue = {"on":True, "sat":s, "bri":b,"hue":h, "transitiontime": t}
    return hue


def main():

    CONFIG = os.environ.get('CONFIG','--NOT SET--')
    DEBUG = os.environ.get('DEBUG','--NOT SET--')

    parser = argparse.ArgumentParser(description='Sensor Collector')
    parser.add_argument('-C', '--config', default=CONFIG, help='Path to config file')
    parser.add_argument('-D', '--debug', default=DEBUG, help='Output debug information')
    parser.add_argument('-p', '--port', default=8080, help='Server port')
    args = parser.parse_args()

    print "config path: %s" %args.config
    print "debug? %s" %args.debug
    print "port? %s" %args.port

    urls = ["http://10.31.75.5/api/1bf65ff514536e0e70a846a26cacb459/groups/0/action"]
    controller = BridgeController(urls)

    loop(controller)

    return controller


if __name__ == '__main__':
    try:
        # On SIGINT we should turn off and then exit
        controller = main()
        signal.signal(signal.SIGINT, controller.quit_gracefully)
    except KeyboardInterrupt, e:
        print "KeyboardInterrupt: clean up and exit."
        controller.quit_gracefully()
    except SystemExit, e:
        print "SystemExit: clean up and exit."
        controller.quit_gracefully()
    except requests.exceptions.ConnectionTimeout, e:
        #What should we do here? Exit and come back up?
        print str(e)
        traceback.print_exc()
        sys.exit(1)
    except Exception, e:
        print str(e)
        traceback.print_exc()
        sys.exit(1)


# start:
# #! /bin/bash
# python pyworker &
# PID=$!
# echo $PID > pyworkderpid
#
# stop:
# echo "sending SIGINT to process $PID"
#
# kill -SIGINT $PID
