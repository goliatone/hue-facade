#!/usr/bin/env node
'use strict';

var configFile = process.argv[2] || 'hue-facade';

var Client = require('../lib/client'),
    config = require('../config/' + configFile + '.json'),
    extend = require('gextend'),
    clients = [],
    _floor;


var defaults = config.options,
    delay = config.delay || 0;

/*
 * Initialize clients:
 */
config.bridges.map(function(bridge){
    //merge bridge config to default options.
    var opts = extend({}, defaults, bridge);

    // opts.onDelay = opts.onDelay * (opts.index + 1);
    // opts.offDelay = opts.offDelay * (opts.index + 1);

    opts.onDelay = opts.onDelay + (opts.index * 1000);
    opts.offDelay = opts.offDelay + (opts.index * 1000);

    console.log('FL', bridge.id, opts.onDelay, opts.offDelay);

    _floor = new Client(opts);

    clients.push(_floor);

    //If we did not define an index, we make it 0
    bridge.index = bridge.index || 0;

    //push all bridges to start on next frame
    if(delay) _floor.off(true, 0);
    else setTimeout(_floor.start.bind(_floor), delay * bridge.index);
    // setTimeout(_floor.start.bind(_floor), delay * bridge.index);
});


/**
 * Handle SIGINT, either sent with CTR + C
 * or by a process manager like `pm2`.
 * We want to turn off all lights before
 * exiting.
 *
 * `pm2 stop 0` will send a `SIGINT`.
 */
process.on('SIGINT', function(){

    //TODO: We should do a promise all.
    clients.map(function(client){
        client.stop();
        _floor = client;
    });

    _floor.stop().then(function(){
        console.log('CLEAN EXIT');
        process.exit(0);
    }).catch(function(err){
        console.error('ERROR ON EXIT', err.message);
        process.exit(1);
    });
});
